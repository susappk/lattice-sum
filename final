#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Feb 25 10:07:20 2017

@author: xiaabs
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Feb 19 17:33:20 2017
new editon with function 
@author: teddy
unit meter
"""
from multiprocessing import Pool
import os
import time
import numpy as np
import matplotlib.pyplot as plt
wavelength_nm,exp_n,exp_k,fdtd_n,fdtd_k=np.loadtxt("/home/xiaabs/Desktop/Au (Gold) - Palik.txt",unpack='true')
lam=wavelength_nm
n=fdtd_n+1j*fdtd_k
k_0=2*np.pi/(lam*1e-9)
k_s=k_0
###########################################################
def j(x):
    return np.sin(x)/x**2-np.cos(x)/x
def jj(x):
    return np.sin(x)+np.cos(x)/x-np.sin(x)/x**2        
def h(x):
    return np.exp(1j*x)*(-1/x-1j/x**2)        
def hh(x):
    return -1j*np.exp(1j*x)+(x+1j)*np.exp(1j*x)/x**2
def alphap(a,k,n):
    rho =k*a#半径????       
    a1=(n**2*j(n*rho)*jj(rho)-j(rho)*jj(n*rho))/(n**2*j(n*rho)*hh(rho)-h(rho)*jj(n*rho))
    return 1j*6*np.pi*a1/k**3
########################################################
class main(object):
    def __init__(self,C):
        self.period=90e-9  #period
        self.radius=5e-9 #纳米球半径   
        self.C=C
        con=17*1e-9*self.C #六边形边长        
        self.e=self.period/6  
        self.wei={}
        self.wei[0]=np.array([np.sqrt(3)*con/2,-con/2,0])
        self.wei[1]=np.array([np.sqrt(3)*con/2,con/2,self.e])
        self.wei[2]=np.array([0,con,2*self.e]) 
        self.wei[3]=np.array([-np.sqrt(3)*con/2,con/2,3*self.e])
        self.wei[4]=np.array([-np.sqrt(3)*con/2,-con/2,4*self.e])
        self.wei[5]=np.array([0,-con,5*self.e])
        self.lat=401
        self.line=6
    #############################################################
    def efield_axis(self,nn,k):
        E={"lhp":np.zeros((3*self.line),dtype=np.complex),"rhp":np.zeros((3*self.line),dtype=np.complex)}  
        for a in np.arange(self.line):
            phase_position=nn*self.period+np.ones(3)*self.wei[a][2]  
            E1=np.array([1,-1j,0])*np.exp(1j*k*(phase_position))#lhp k=+z x=1 y=-1j
            E["lhp"][(0+3*a):(3+3*a)]=E1/np.linalg.norm(E1)
            E2=np.array([1,1j,0])*np.exp(1j*k*(phase_position))
            E["rhp"][(0+3*a):(3+3*a)]=E2/np.linalg.norm(E2) 
        return E
    def efield_crosssection(self,k):
        E={"lhp":np.zeros((3*self.line),dtype=np.complex),"rhp":np.zeros((3*self.line),dtype=np.complex)}  
        for a in np.arange(self.line):
            phase_position=np.ones(3)*(self.wei[2][1]-self.wei[a][1])            
            E1=np.array([1,0,-1j])*np.exp(1j*k*(phase_position))#lhp k=+z x=1 y=-1j
            E["lhp"][(0+3*a):(3+3*a)]=E1/np.linalg.norm(E1)
            E2=np.array([1,0,1j])*np.exp(1j*k*(phase_position))
            E["rhp"][(0+3*a):(3+3*a)]=E2/np.linalg.norm(E2) 
        return E
#########################################################################  
    """Sat 25 Feb checked""" 
    def G(self,r,k):
        r=r.reshape(1,3)  
        R=np.linalg.norm(r)        
        I=np.eye(3,dtype=np.complex)
        nn=r.T.dot(r)/R**2          
        squre=((1+1j/k/R-1/k**2/R**2)*I+(-1-1j*3/k/R+3/k**2/R**2)*nn)       
        propagater={"axis":squre*np.exp(1j*k*(R-r[0,2]))/(4*np.pi*R),"cross":squre*np.exp(1j*k*R)/(4*np.pi*R)} 
        return  propagater
###################################################################################3
    """Sat 25 Feb checked""" 
    def invf(self,lat,k,n):
        I=np.eye(3*self.line,dtype=np.complex)        
        inverse={"axis":np.zeros((3*self.line,3*self.line),dtype=np.complex),"cross":np.zeros((3*self.line,3*self.line),dtype=np.complex)}
        for a in np.arange(self.line):
            for b in np.arange(self.line): 
                vector=self.wei[a]-self.wei[b]
                for m in np.arange(lat):
                    f=m-(lat-1)/2                                 
                    if not((f==0) and (a==b)):
                        propagater=self.G((vector+f*self.period),k) 
                        inverse["axis"][(0+3*a):(3+3*a),(0+3*b):(3+3*b)]+=propagater["axis"]
                        inverse["cross"][(0+3*a):(3+3*a),(0+3*b):(3+3*b)]+=propagater["cross"]
        alpha=alphap(self.radius,k,n)
        inverse["axis"]=np.linalg.inv(I/alpha-k**2*inverse["axis"])
        inverse["cross"]=np.linalg.inv(I/alpha-k**2*inverse["cross"])
        return inverse
######################################################################################## 
    def ext(self,i):
        print('Run task %s (%s)...' % (i, os.getpid()))
        start = time.time()
        ############################################
        ext={"axisl":0,"axisr":0}
        inverse=self.invf(self.lat,k_0[i],n[i])
        for m in np.arange(self.lat):
            E=self.efield_axis(m,k_0[i])
            ext["axisl"]+=k_0[i]*(E["lhp"].conj().dot(inverse["axis"].dot(E["lhp"]))).imag
            ext["axisr"]+=k_0[i]*(E["rhp"].conj().dot(inverse["axis"].dot(E["rhp"]))).imag
        ext["axis_cd"]=ext["axisl"]-ext["axisr"]  
    
        E2=self.efield_crosssection(k_0[i])
        ext["crossl"]=self.lat*k_0[i]*(E2["lhp"].conj().dot(inverse["cross"].dot(E2["lhp"]))).imag
        ext["crossr"]=self.lat*k_0[i]*(E2["rhp"].conj().dot(inverse["cross"].dot(E2["rhp"]))).imag
        ext["cross_cd"]=ext["crossl"]-ext["crossr"]
        ############################################
        end = time.time()
        print('Task %s runs %0.2f seconds.' % (i, (end - start))) 
        return ext
############################################################################
    def run(self):
        if __name__=='__main__':
            print('Parent process %s.' % os.getpid())
            p = Pool(8)
            result={}
            for i in range(1000):
                result[i]=p.apply_async(self.ext,args=(i,))
            print('Waiting for all subprocesses done...')
            p.close()    
            p.join()  
            print('All subprocesses done.')
        return result
##############################################################################  
result=main(1).run()
ext=np.zeros((4,1000),dtype=np.complex)
for i in np.arange(1000):
    ext[0,i]=result[i].get()["axis_cd"]/401
    ext[1,i]=result[i].get()["cross_cd"]/401
    ext[2,i]=result[i].get()["axisl"]/401
    ext[3,i]=result[i].get()["crossl"]/401
########################################################    -
print(lam[np.argmax(ext[0,:])],np.max(ext[0,:]))
print(lam[np.argmin(ext[1,:])],np.min(ext[1,:]))
plt.figure()
plt.plot(lam,ext[0,:],label="$axis-cd$")
plt.xlabel("$lambda$")
plt.ylabel("$\sigma_{ext}$")
plt.title("sum")
plt.legend()   

plt.figure()
plt.plot(lam,ext[1,:],label="$cross-cd$")
plt.xlabel("$lambda$")
plt.ylabel("$\sigma_{ext}$")
plt.title("sum")
plt.legend()

plt.figure()
plt.plot(lam,ext[2,:],label="$axis-l")
plt.xlabel("$lambda$")
plt.ylabel("$\sigma_{ext}$")
plt.title("sum")
plt.legend()   

plt.figure()
plt.plot(lam,ext[3,:],label="$cross-l$")
plt.xlabel("$lambda$")
plt.ylabel("$\sigma_{ext}$")
plt.title("sum")
plt.legend()
############
###############################################################
#sample=10
#a=np.zeros((2,sample),dtype=np.complex)
#ext=np.zeros((2,sample,1000),dtype=np.complex)
#for i in np.arange(sample):  
#    result=main(i*0.15+0.5).run()
#    for d in range(1000):
#        ext[0,i,d]=result[i].get()["axis_cd"]/401
#        ext[1,i,d]=result[i].get()["cross_cd"]/401
#
#    a[0,i]=np.max(ext[0,i,:])
#    a[1,i]=np.max(ext[1,i,:])
##########################################################    
#e=np.zeros((sample),dtype=np.complex)
#for i in np.arange(sample):  
#    e[i]=i*0.15+0.5
#
#plt.figure()
#plt.plot(e,a[0,:],label="$x$")
#plt.xlabel("$n*17$")
#plt.ylabel("$\sigma_{ext}$")
#plt.title("sum")
#plt.legend()   
#
#plt.figure()
#plt.plot(e,a[1,:],label="$x$")
#plt.xlabel("$n*17$")
#plt.ylabel("$\sigma_{ext}$")
#plt.title("sum")
#plt.legend()
#
#
#
#
#
#
#
#plt.figure()
#plt.plot(np.log(e),np.log(a[0,:]),label="$x^n$")
#plt.xlabel("$lambda$")
#plt.ylabel("$\sigma_{ext}$")
#plt.title("sum")
#plt.legend()   
#
#plt.figure()
#plt.plot(e,np.log(a[0,:]),label="$e^x$")
#plt.xlabel("$lambda$")
#plt.ylabel("$\sigma_{ext}$")
#plt.title("sum")
#plt.legend()
#
#plt.figure()
#plt.plot(np.log(e),np.log(a[1,:]),label="$x^n$")
#plt.xlabel("$lambda$")
#plt.ylabel("$\sigma_{ext}$")
#plt.title("sum")
#plt.legend()   
#
#plt.figure()
#plt.plot(e,np.log(a[1,:]),label="$e^x$")
#plt.xlabel("$lambda$")
#plt.ylabel("$\sigma_{ext}$")
#plt.title("sum")
#plt.legend()
#plt.figure()
#plt.plot(np.log(e*17),np.log(a[1,:]),label="$x^n$")
#plt.xlabel("$lambda$")
#plt.ylabel("$\sigma_{ext}$")
#plt.title("sum")
#plt.legend()   
#
#plt.figure()
#plt.plot(e*17,np.log(a[1,:]),label="$e^x$")
#plt.xlabel("$lambda$")
#plt.ylabel("$\sigma_{ext}$")
#plt.title("sum")
#plt.legend()